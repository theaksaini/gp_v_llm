{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":null,\"output1\":null},\"1\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"2\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"3\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"4\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"},\"5\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"6\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"7\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"8\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"9\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"10\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"11\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"12\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"13\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"14\":{\"input1\":\"us\",\"output1\":\"us\"},\"15\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"16\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"17\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"18\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"19\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"20\":{\"input1\":\"i\",\"output1\":\"i\"},\"21\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"22\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"23\":{\"input1\":\"do\",\"output1\":\"do\"},\"24\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"25\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"26\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"27\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"28\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"29\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"30\":{\"input1\":\"d\",\"output1\":\"d\"},\"31\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"32\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"33\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"34\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"35\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"36\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"37\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"38\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"39\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"40\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"41\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"42\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"45\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"46\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"47\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"48\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"49\":{\"input1\":\"gik\",\"output1\":\"gik\"}}", "response": "\ndef my_func(s):\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == '-':\n            i += 1\n            if i < len(s):\n                result.append(s[i].upper())\n        else:\n            result.append(s[i])\n        i += 1\n    return ''.join(result)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":null,\"output1\":null},\"1\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"2\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"3\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"4\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"},\"5\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"6\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"7\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"8\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"9\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"10\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"11\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"12\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"13\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"14\":{\"input1\":\"us\",\"output1\":\"us\"},\"15\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"16\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"17\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"18\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"19\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"20\":{\"input1\":\"i\",\"output1\":\"i\"},\"21\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"22\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"23\":{\"input1\":\"do\",\"output1\":\"do\"},\"24\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"25\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"26\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"27\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"28\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"29\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"30\":{\"input1\":\"d\",\"output1\":\"d\"},\"31\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"32\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"33\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"34\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"35\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"36\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"37\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"38\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"39\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"40\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"41\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"42\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"45\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"46\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"47\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"48\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"49\":{\"input1\":\"gik\",\"output1\":\"gik\"}}", "response": "\ndef my_func(s):\n    # Split the string by '-'\n    parts = s.split('-')\n    \n    # If there is only one part, return it as it is\n    if len(parts) == 1:\n        return s\n    \n    # Convert it to camel case\n    result = parts[0]  # First part remains lowercase\n    for part in parts[1:]:\n        result += part.capitalize()\n    \n    return result\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":null,\"output1\":null},\"1\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"2\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"3\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"4\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"},\"5\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"6\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"7\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"8\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"9\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"10\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"11\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"12\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"13\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"14\":{\"input1\":\"us\",\"output1\":\"us\"},\"15\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"16\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"17\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"18\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"19\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"20\":{\"input1\":\"i\",\"output1\":\"i\"},\"21\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"22\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"23\":{\"input1\":\"do\",\"output1\":\"do\"},\"24\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"25\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"26\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"27\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"28\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"29\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"30\":{\"input1\":\"d\",\"output1\":\"d\"},\"31\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"32\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"33\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"34\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"35\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"36\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"37\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"38\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"39\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"40\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"41\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"42\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"45\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"46\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"47\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"48\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"49\":{\"input1\":\"gik\",\"output1\":\"gik\"}}", "response": "\ndef my_func(s):\n    # Split the string by '-' to handle dash-separated words\n    parts = s.split('-')\n    # Capitalize each part except the first and join them\n    camel_case = parts[0] + ''.join(word.capitalize() for word in parts[1:])\n    return camel_case\n\n# Test cases\ntest_cases = {\n    \"0\": {\"input1\": None, \"output1\": None},\n    \"1\": {\"input1\": \"nospaceordash\", \"output1\": \"nospaceordash\"},\n    \"2\": {\"input1\": \"two-words\", \"output1\": \"twoWords\"},\n    \"3\": {\"input1\": \"two words\", \"output1\": \"two words\"},\n    \"4\": {\"input1\": \"all separate words\", \"output1\": \"all separate words\"},\n    \"5\": {\"input1\": \"all-one-word-dashed\", \"output1\": \"allOneWordDashed\"},\n    \"6\": {\"input1\": \"loooooong-wooooords\", \"output1\": \"loooooongWooooords\"},\n    \"7\": {\"input1\": \"loooooong wooooords\", \"output1\": \"loooooong wooooords\"},\n    \"8\": {\"input1\": \"a-b-c-d-e-f-g-h-i-j\", \"output1\": \"aBCDEFGHIJ\"},\n    \"9\": {\"input1\": \"a b c d e f g h i j\", \"output1\": \"a b c d e f g h i j\"},\n    \"10\": {\"input1\": \"saaaaaaaaaaaaaaaaame\", \"output1\": \"saaaaaaaaaaaaaaaaame\"},\n    \"11\": {\"input1\": \"zakwm rxna\", \"output1\": \"zakwm rxna\"},\n    \"12\": {\"input1\": \"pkkzy-i-weo-tdtzb-f\", \"output1\": \"pkkzyIWeoTdtzbF\"},\n    \"13\": {\"input1\": \"hg nax-lxh\", \"output1\": \"hg naxLxh\"},\n    \"14\": {\"input1\": \"us\", \"output1\": \"us\"},\n    \"15\": {\"input1\": \"mgfhr-kp-bnib-iao\", \"output1\": \"mgfhrKpBnibIao\"},\n    \"16\": {\"input1\": \"nyid-upgq\", \"output1\": \"nyidUpgq\"},\n    \"17\": {\"input1\": \"w m-avs sbho\", \"output1\": \"w mAvs sbho\"},\n    \"18\": {\"input1\": \"ssvc\", \"output1\": \"ssvc\"},\n    \"19\": {\"input1\": \"e-nfkl-h\", \"output1\": \"eNfklH\"},\n    \"20\": {\"input1\": \"i\", \"output1\": \"i\"},\n    \"21\": {\"input1\": \"ui norp-txb\", \"output1\": \"ui norpTxb\"},\n    \"22\": {\"input1\": \"w-mvckd qg\", \"output1\": \"wMvckd qg\"},\n    \"23\": {\"input1\": \"do\", \"output1\": \"do\"},\n    \"24\": {\"input1\": \"iy-jbwju hiwh\", \"output1\": \"iyJbwju hiwh\"},\n    \"25\": {\"input1\": \"xqie-kw-xxa\", \"output1\": \"xqieKwXxa\"},\n    \"26\": {\"input1\": \"nujo-ji-ezp\", \"output1\": \"nujoJiEzp\"},\n    \"27\": {\"input1\": \"xhz-vpp-bbs-t\", \"output1\": \"xhzVppBbsT\"},\n    \"28\": {\"input1\": \"i-xww y ci\", \"output1\": \"iXww y ci\"},\n    \"29\": {\"input1\": \"zwbz-xou\", \"output1\": \"zwbzXou\"},\n    \"30\": {\"input1\": \"d\", \"output1\": \"d\"},\n    \"31\": {\"input1\": \"qvuer o bs\", \"output1\": \"qvuer o bs\"},\n    \"32\": {\"input1\": \"pnb\", \"output1\": \"pnb\"},\n    \"33\": {\"input1\": \"ipp-nmo-i kungv d-z\", \"output1\": \"ippNmoI kungv dZ\"},\n    \"34\": {\"input1\": \"dyvy-r-a\", \"output1\": \"dyvyRA\"},\n    \"35\": {\"input1\": \"izsvb fcz\", \"output1\": \"izsvb fcz\"},\n    \"36\": {\"input1\": \"b erpa\", \"output1\": \"b erpa\"},\n    \"37\": {\"input1\": \"rtk zn-i-gym\", \"output1\": \"rtk znIGym\"},\n    \"38\": {\"input1\": \"azyio-o-zj-ann nm\", \"output1\": \"azyioOZjAnn nm\"},\n    \"39\": {\"input1\": \"ln-wqda fqff-n-snb\", \"output1\": \"lnWqda fqffNSnb\"},\n    \"40\": {\"input1\": \"gfxlv-rboq\", \"output1\": \"gfxlvRboq\"},\n    \"41\": {\"input1\": \"nbsf-lkm-majhu i p\", \"output1\": \"nbsfLkmMajhu i p\"},\n    \"42\": {\"input1\": \"ee-qjjo-xnqrp\", \"output1\": \"eeQjjoXnqrp\"},\n    \"43\": {\"input1\": \"k-sztp ek-ct-ewrxl\", \"output1\": \"kSztp ekCtEwrxl\"},\n    \"44\": {\"input1\": \"ggm-z-vf-hm-rhww-vf\", \"output1\": \"ggmZVfHmRhwwVf\"},\n    \"45\": {\"input1\": \"wr-yb\", \"output1\": \"wrYb\"},\n    \"46\": {\"input1\": \"gt n-z-fyzy-pi\", \"output1\": \"gt nZFyzyPi\"},\n    \"47\": {\"input1\": \"vkji-i-y\", \"output1\": \"vkjiIY\"},\n    \"48\": {\"input1\": \"aimz-yg\", \"output1\": \"aimzYg\"},\n    \"49\": {\"input1\": \"gik\", \"output1\": \"gik\"}\n}\n\n# Validate the function with test cases\nfor key, test in test_cases.items():\n    input1 = test['input1']\n    expected_output = test['output1']\n    actual_output = my_func(input1)\n    assert actual_output == expected_output, f\"Test {key} failed: Expected {expected_output}, got {actual_output}\"\n\nprint(\"All tests passed!\")\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":null,\"output1\":null},\"1\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"2\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"3\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"4\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"},\"5\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"6\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"7\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"8\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"9\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"10\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"11\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"12\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"13\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"14\":{\"input1\":\"us\",\"output1\":\"us\"},\"15\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"16\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"17\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"18\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"19\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"20\":{\"input1\":\"i\",\"output1\":\"i\"},\"21\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"22\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"23\":{\"input1\":\"do\",\"output1\":\"do\"},\"24\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"25\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"26\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"27\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"28\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"29\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"30\":{\"input1\":\"d\",\"output1\":\"d\"},\"31\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"32\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"33\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"34\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"35\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"36\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"37\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"38\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"39\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"40\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"41\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"42\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"45\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"46\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"47\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"48\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"49\":{\"input1\":\"gik\",\"output1\":\"gik\"}}", "response": "\ndef my_func(input_str):\n    if '-' not in input_str:\n        return input_str\n    \n    parts = input_str.split('-')\n    result = parts[0]\n    \n    for part in parts[1:]:\n        if part:\n            result += part.capitalize()\n    \n    return result\n\n# Example usage:\n# print(my_func(\"two-words\"))  # Output: \"twoWords\"\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":null,\"output1\":null},\"1\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"2\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"3\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"4\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"},\"5\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"6\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"7\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"8\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"9\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"10\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"11\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"12\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"13\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"14\":{\"input1\":\"us\",\"output1\":\"us\"},\"15\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"16\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"17\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"18\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"19\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"20\":{\"input1\":\"i\",\"output1\":\"i\"},\"21\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"22\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"23\":{\"input1\":\"do\",\"output1\":\"do\"},\"24\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"25\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"26\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"27\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"28\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"29\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"30\":{\"input1\":\"d\",\"output1\":\"d\"},\"31\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"32\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"33\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"34\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"35\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"36\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"37\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"38\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"39\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"40\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"41\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"42\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"45\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"46\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"47\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"48\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"49\":{\"input1\":\"gik\",\"output1\":\"gik\"}}", "response": "\ndef my_func(input_str):\n    # Split the string by spaces to handle each segment separately\n    parts = input_str.split(' ')\n    \n    # For each part, check if it contains hyphens and convert them to camelCase\n    transformed_parts = []\n    for part in parts:\n        if '-' in part:\n            words = part.split('-')\n            # Capitalize each word after the first one\n            camel_case_part = words[0] + ''.join(word.capitalize() for word in words[1:])\n            transformed_parts.append(camel_case_part)\n        else:\n            transformed_parts.append(part)\n    \n    # Join the parts back with spaces to form the final result\n    return ' '.join(transformed_parts)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1):\n    if input1 is None:\n        return None\n    \n    result = []\n    capitalize_next = False\n    \n    for char in input1:\n        if char == '-':\n            capitalize_next = True\n        else:\n            if capitalize_next:\n                result.append(char.upper())\n                capitalize_next = False\n            else:\n                result.append(char)\n    \n    return ''.join(result)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_string):\n    if input_string is None:\n        return None\n    \n    # Split the string by spaces\n    parts = input_string.split(' ')\n    \n    # Process each part separately\n    for i in range(len(parts)):\n        # Split by hyphen\n        sub_parts = parts[i].split('-')\n        \n        # Capitalize all sub-parts except the first one\n        for j in range(1, len(sub_parts)):\n            sub_parts[j] = sub_parts[j].capitalize()\n        \n        # Join sub-parts back without hyphens\n        parts[i] = ''.join(sub_parts)\n    \n    # Join all parts by spaces\n    return ' '.join(parts)\n\n# Example usage:\n# print(my_func(\"mgfhr-kp-bnib-iao\"))  # Outputs: \"mgfhrKpBnibIao\"\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(s):\n    parts = s.split(' ')\n    camel_case_parts = []\n    \n    for part in parts:\n        subparts = part.split('-')\n        # Capitalize each subpart except for the first one in the part\n        camel_case_subparts = [subparts[0]] + [subpart.capitalize() for subpart in subparts[1:]]\n        camel_case_parts.append(''.join(camel_case_subparts))\n    \n    # Join the parts back with spaces\n    return ' '.join(camel_case_parts)\n\n# Test cases (based on provided assertions)\nassert my_func(\"i-xww y ci\") == \"iXww y ci\"\nassert my_func(\"mgfhr-kp-bnib-iao\") == \"mgfhrKpBnibIao\"\nassert my_func(\"rtk zn-i-gym\") == \"rtk znIGym\"\nassert my_func(\"gt n-z-fyzy-pi\") == \"gt nZFyzyPi\"\nassert my_func(\"gik\") == \"gik\"\nassert my_func(\"ui norp-txb\") == \"ui norpTxb\"\nassert my_func(\"w m-avs sbho\") == \"w mAvs sbho\"\nassert my_func(\"azyio-o-zj-ann nm\") == \"azyioOZjAnn nm\"\nassert my_func(\"xhz-vpp-bbs-t\") == \"xhzVppBbsT\"\nassert my_func(\"i\") == \"i\"\nassert my_func(\"pkkzy-i-weo-tdtzb-f\") == \"pkkzyIWeoTdtzbF\"\nassert my_func(\"pnb\") == \"pnb\"\nassert my_func(\"nyid-upgq\") == \"nyidUpgq\"\nassert my_func(\"ipp-nmo-i kungv d-z\") == \"ippNmoI kungv dZ\"\nassert my_func(\"iy-jbwju hiwh\") == \"iyJbwju hiwh\"\nassert my_func(\"nujo-ji-ezp\") == \"nujoJiEzp\"\nassert my_func(\"two-words\") == \"twoWords\"\nassert my_func(\"zwbz-xou\") == \"zwbzXou\"\nassert my_func(\"a b c d e f g h i j\") == \"a b c d e f g h i j\"\nassert my_func(\"hg nax-lxh\") == \"hg naxLxh\"\nassert my_func(\"zakwm rxna\") == \"zakwm rxna\"\nassert my_func(\"w-mvckd qg\") == \"wMvckd qg\"\nassert my_func(\"ssvc\") == \"ssvc\"\nassert my_func(\"all-one-word-dashed\") == \"allOneWordDashed\"\nassert my_func(\"loooooong wooooords\") == \"loooooong wooooords\"\nassert my_func(\"ggm-z-vf-hm-rhww-vf\") == \"ggmZVfHmRhwwVf\"\nassert my_func(\"two words\") == \"two words\"\nassert my_func(\"vkji-i-y\") == \"vkjiIY\"\nassert my_func(\"ln-wqda fqff-n-snb\") == \"lnWqda fqffNSnb\"\nassert my_func(\"d\") == \"d\"\nassert my_func(\"nbsf-lkm-majhu i p\") == \"nbsfLkmMajhu i p\"\nassert my_func(\"izsvb fcz\") == \"izsvb fcz\"\nassert my_func(\"dyvy-r-a\") == \"dyvyRA\"\nassert my_func(\"ee-qjjo-xnqrp\") == \"eeQjjoXnqrp\"\nassert my_func(\"a-b-c-d-e-f-g-h-i-j\") == \"aBCDEFGHIJ\"\nassert my_func(\"b erpa\") == \"b erpa\"\nassert my_func(\"do\") == \"do\"\nassert my_func(\"nospaceordash\") == \"nospaceordash\"\nassert my_func(\"nan\") == \"nan\"\nassert my_func(\"gfxlv-rboq\") == \"gfxlvRboq\"\nassert my_func(\"wr-yb\") == \"wrYb\"\nassert my_func(\"xqie-kw-xxa\") == \"xqieKwXxa\"\nassert my_func(\"loooooong-wooooords\") == \"loooooongWooooords\"\nassert my_func(\"k-sztp ek-ct-ewrxl\") == \"kSztp ekCtEwrxl\"\nassert my_func(\"saaaaaaaaaaaaaaaaame\") == \"saaaaaaaaaaaaaaaaame\"\nassert my_func(\"aimz-yg\") == \"aimzYg\"\nassert my_func(\"qvuer o bs\") == \"qvuer o bs\"\nassert my_func(\"e-nfkl-h\") == \"eNfklH\"\nassert my_func(\"us\") == \"us\"\nassert my_func(\"all separate words\") == \"all separate words\"\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1):\n    if input1 is None:\n        return None\n\n    # Split by spaces to handle separate words\n    parts = input1.split(' ')\n    transformed_parts = []\n\n    for part in parts:\n        # Split each part by dashes, capitalize each part except the first one\n        sub_parts = part.split('-')\n        camel_case_part = sub_parts[0] + ''.join(word.capitalize() for word in sub_parts[1:])\n        transformed_parts.append(camel_case_part)\n\n    # Join back the parts with spaces to maintain separate words\n    output1 = ' '.join(transformed_parts)\n    return output1\n\n# Example usage:\noutput1 = my_func(\"i-xww y ci\")\nprint(output1)  # Output: iXww y ci\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_str):\n    # Check if the input is None, if so return None\n    if input_str is None:\n        return None\n    \n    # Split the input string by spaces\n    words = input_str.split(' ')\n    \n    # Initialize a list to collect transformed words\n    transformed_words = []\n    \n    # Iterate over each word in the split input\n    for word in words:\n        # Split each word by hyphen '-'\n        parts = word.split('-')\n        \n        # Capitalize the first character of each part except the first one\n        # Join the parts to form a new word\n        transformed_word = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n        \n        # Append the transformed word to the list\n        transformed_words.append(transformed_word)\n    \n    # Join the transformed words with space and return the result\n    return ' '.join(transformed_words)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(s):\n    # Initialize an empty result string\n    result = \"\"\n    # Flag to indicate if the next character should be capitalized\n    capitalize_next = False\n    \n    for char in s:\n        if char == '-':\n            # Set the flag to capitalize the next character\n            capitalize_next = True\n        else:\n            if capitalize_next:\n                # Capitalize the current character and add to the result\n                result += char.upper()\n                # Reset the flag\n                capitalize_next = False\n            else:\n                # Add the character as it is\n                result += char\n    \n    return result\n\n# Sample assertions to test the function\nassert my_func(\"i-xww y ci\") == \"iXww y ci\"\nassert my_func(\"mgfhr-kp-bnib-iao\") == \"mgfhrKpBnibIao\"\nassert my_func(\"rtk zn-i-gym\") == \"rtk znIGym\"\nassert my_func(\"gt n-z-fyzy-pi\") == \"gt nZFyzyPi\"\nassert my_func(\"gik\") == \"gik\"\nassert my_func(\"ui norp-txb\") == \"ui norpTxb\"\nassert my_func(\"w m-avs sbho\") == \"w mAvs sbho\"\nassert my_func(\"azyio-o-zj-ann nm\") == \"azyioOZjAnn nm\"\nassert my_func(\"xhz-vpp-bbs-t\") == \"xhzVppBbsT\"\nassert my_func(\"i\") == \"i\"\nassert my_func(\"pkkzy-i-weo-tdtzb-f\") == \"pkkzyIWeoTdtzbF\"\nassert my_func(\"pnb\") == \"pnb\"\nassert my_func(\"nyid-upgq\") == \"nyidUpgq\"\nassert my_func(\"ipp-nmo-i kungv d-z\") == \"ippNmoI kungv dZ\"\nassert my_func(\"iy-jbwju hiwh\") == \"iyJbwju hiwh\"\nassert my_func(\"nujo-ji-ezp\") == \"nujoJiEzp\"\nassert my_func(\"two-words\") == \"twoWords\"\nassert my_func(\"zwbz-xou\") == \"zwbzXou\"\nassert my_func(\"a b c d e f g h i j\") == \"a b c d e f g h i j\"\nassert my_func(\"hg nax-lxh\") == \"hg naxLxh\"\nassert my_func(\"zakwm rxna\") == \"zakwm rxna\"\nassert my_func(\"w-mvckd qg\") == \"wMvckd qg\"\nassert my_func(\"ssvc\") == \"ssvc\"\nassert my_func(\"all-one-word-dashed\") == \"allOneWordDashed\"\nassert my_func(\"loooooong wooooords\") == \"loooooong wooooords\"\nassert my_func(\"ggm-z-vf-hm-rhww-vf\") == \"ggmZVfHmRhwwVf\"\nassert my_func(\"two words\") == \"two words\"\nassert my_func(\"vkji-i-y\") == \"vkjiIY\"\nassert my_func(\"ln-wqda fqff-n-snb\") == \"lnWqda fqffNSnb\"\nassert my_func(\"d\") == \"d\"\nassert my_func(\"nbsf-lkm-majhu i p\") == \"nbsfLkmMajhu i p\"\nassert my_func(\"izsvb fcz\") == \"izsvb fcz\"\nassert my_func(\"dyvy-r-a\") == \"dyvyRA\"\nassert my_func(\"ee-qjjo-xnqrp\") == \"eeQjjoXnqrp\"\nassert my_func(\"a-b-c-d-e-f-g-h-i-j\") == \"aBCDEFGHIJ\"\nassert my_func(\"b erpa\") == \"b erpa\"\nassert my_func(\"do\") == \"do\"\nassert my_func(\"nospaceordash\") == \"nospaceordash\"\nassert my_func(\"nan\") == \"nan\"\nassert my_func(\"gfxlv-rboq\") == \"gfxlvRboq\"\nassert my_func(\"wr-yb\") == \"wrYb\"\nassert my_func(\"xqie-kw-xxa\") == \"xqieKwXxa\"\nassert my_func(\"loooooong-wooooords\") == \"loooooongWooooords\"\nassert my_func(\"k-sztp ek-ct-ewrxl\") == \"kSztp ekCtEwrxl\"\nassert my_func(\"saaaaaaaaaaaaaaaaame\") == \"saaaaaaaaaaaaaaaaame\"\nassert my_func(\"aimz-yg\") == \"aimzYg\"\nassert my_func(\"qvuer o bs\") == \"qvuer o bs\"\nassert my_func(\"e-nfkl-h\") == \"eNfklH\"\nassert my_func(\"us\") == \"us\"\nassert my_func(\"all separate words\") == \"all separate words\"\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_str):\n    if input_str is None:\n        return None\n    words = input_str.split(' ')\n    camel_cased_words = []\n    for word in words:\n        parts = word.split('-')\n        camel_cased_word = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n        camel_cased_words.append(camel_cased_word)\n    return ' '.join(camel_cased_words)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(s):\n    parts = s.split(' ')\n    for i, part in enumerate(parts):\n        if '-' in part:\n            subparts = part.split('-')\n            subparts = [subparts[0]] + [x.capitalize() for x in subparts[1:]]\n            parts[i] = ''.join(subparts)\n    return ' '.join(parts)\n"}
{"question": [" ", "a string of length [1, 20]", "a string"], "context": "{\"0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"9\":{\"input1\":\"i\",\"output1\":\"i\"},\"10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"29\":{\"input1\":\"d\",\"output1\":\"d\"},\"30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"36\":{\"input1\":\"do\",\"output1\":\"do\"},\"37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"38\":{\"input1\":null,\"output1\":null},\"39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"48\":{\"input1\":\"us\",\"output1\":\"us\"},\"49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_str):\n    if input_str is None:\n        return None\n    \n    # Split the string by the dash \"-\"\n    parts = input_str.split('-')\n    \n    # Capitalize the first character of each part after the first part\n    output = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n    \n    return output\n"}
{"question": ["", "a string of length [1, 20]", "a string"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_string):\n    \"\"\"\n    Converts a dashed string into camelCase format, maintaining spaces and untouched strings.\n    \"\"\"\n    if input_string is None:\n        return None\n    \n    # Split the input string by spaces to handle each 'word' separately\n    words = input_string.split(\" \")\n    \n    # Process each word to convert dashed parts into camelCase\n    output_words = []\n    for word in words:\n        # Split the word by dashes\n        parts = word.split(\"-\")\n        # Capitalize the first letter of each part except the first one\n        camel_cased_word = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n        output_words.append(camel_cased_word)\n    \n    # Join the processed words back with spaces\n    return \" \".join(output_words)\n\n# Example usage:\nexample_input = \"mgfhr-kp-bnib-iao\"\nprint(my_func(example_input))  # Output: \"mgfhrKpBnibIao\"\n"}
{"question": ["", "a string of length [1, 20]", "a string"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1):\n    if input1 is None:\n        return None\n\n    # Split the input by spaces to handle each part separately\n    parts = input1.split(' ')\n    transformed_parts = []\n\n    for part in parts:\n        # Split each part by hyphens\n        hyphenated_words = part.split('-')\n        # Capitalize all but the first word\n        transformed = hyphenated_words[0] + ''.join(word.capitalize() for word in hyphenated_words[1:])\n        transformed_parts.append(transformed)\n\n    # Join the parts with spaces to get the final result\n    return ' '.join(transformed_parts)\n\n# Test the function with an example\nprint(my_func(\"example-test-case\"))  # Output: \"exampleTestCase\"\nprint(my_func(\"another example\"))    # Output: \"another example\"\nprint(my_func(\"one-more-example\"))   # Output: \"oneMoreExample\"\n"}
{"question": ["", "a string of length [1, 20]", "a string"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input_string):\n    \"\"\"\n    This function takes a single input string and converts dashed parts of the string into camelCase format.\n    Strings with spaces are not altered beyond dash-to-camelCase conversion.\n    \"\"\"\n    if input_string is None:\n        return None\n    \n    # Split the string by spaces to handle each word group separately\n    groups = input_string.split(' ')\n    \n    # Process each group\n    result = []\n    for group in groups:\n        # Split by dash and capitalize the subsequent parts\n        parts = group.split('-')\n        if len(parts) > 1:\n            # Capitalize the first letter of each part except the first one\n            camel_cased = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n            result.append(camel_cased)\n        else:\n            # If there's no dash, just append the group as is\n            result.append(group)\n    \n    # Join the processed groups back with spaces\n    return ' '.join(result)\n\n# Example usage:\nprint(my_func(\"mgfhr-kp-bnib-iao\"))  # Output: \"mgfhrKpBnibIao\"\nprint(my_func(\"a-b-c-d-e-f-g-h-i-j\"))  # Output: \"aBCDEFGHIJ\"\n"}
{"question": ["", "a string of length [1, 20]", "a string"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1):\n    # Check if the input is None\n    if input1 is None:\n        return None\n    \n    # Split the input string by spaces to handle groups separately\n    space_split = input1.split(' ')\n    \n    result = []\n    for part in space_split:\n        # Split each part by dash and capitalize except the first\n        dash_split = part.split('-')\n        camel_case_part = dash_split[0] + ''.join(word.capitalize() for word in dash_split[1:])\n        result.append(camel_case_part)\n    \n    # Join the results with spaces to form the final output\n    output1 = ' '.join(result)\n    \n    return output1\n"}
{"question": ["", "a string of length [1, 20]", "a string", "input1:str"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1: str) -> str:\n    # Check if the input is None\n    if input1 is None:\n        return None\n    \n    # Split the input string by spaces to handle different segments separately\n    parts = input1.split(' ')\n    \n    # Process each part separately\n    transformed_parts = []\n    for part in parts:\n        # Split the part by dashes\n        sub_parts = part.split('-')\n        \n        # Capitalize the first letter of each sub-part except the first one\n        if len(sub_parts) > 1:\n            transformed_part = sub_parts[0] + ''.join(sub.capitalize() for sub in sub_parts[1:])\n        else:\n            transformed_part = part\n        \n        # Append the transformed part to the list\n        transformed_parts.append(transformed_part)\n    \n    # Join the transformed parts with spaces\n    return ' '.join(transformed_parts)\n\n# Example usage\nprint(my_func(\"i-xww y ci\"))  # Output: iXww y ci\nprint(my_func(\"two-words\"))   # Output: twoWords\nprint(my_func(\"all separate words\"))  # Output: all separate words\n"}
{"question": ["", "a string of length [1, 20]", "a string", "input1:str"], "context": "{\"Example 0\":{\"input1\":\"i-xww y ci\",\"output1\":\"iXww y ci\"},\"Example 1\":{\"input1\":\"mgfhr-kp-bnib-iao\",\"output1\":\"mgfhrKpBnibIao\"},\"Example 2\":{\"input1\":\"rtk zn-i-gym\",\"output1\":\"rtk znIGym\"},\"Example 3\":{\"input1\":\"gt n-z-fyzy-pi\",\"output1\":\"gt nZFyzyPi\"},\"Example 4\":{\"input1\":\"gik\",\"output1\":\"gik\"},\"Example 5\":{\"input1\":\"ui norp-txb\",\"output1\":\"ui norpTxb\"},\"Example 6\":{\"input1\":\"w m-avs sbho\",\"output1\":\"w mAvs sbho\"},\"Example 7\":{\"input1\":\"azyio-o-zj-ann nm\",\"output1\":\"azyioOZjAnn nm\"},\"Example 8\":{\"input1\":\"xhz-vpp-bbs-t\",\"output1\":\"xhzVppBbsT\"},\"Example 9\":{\"input1\":\"i\",\"output1\":\"i\"},\"Example 10\":{\"input1\":\"pkkzy-i-weo-tdtzb-f\",\"output1\":\"pkkzyIWeoTdtzbF\"},\"Example 11\":{\"input1\":\"pnb\",\"output1\":\"pnb\"},\"Example 12\":{\"input1\":\"nyid-upgq\",\"output1\":\"nyidUpgq\"},\"Example 13\":{\"input1\":\"ipp-nmo-i kungv d-z\",\"output1\":\"ippNmoI kungv dZ\"},\"Example 14\":{\"input1\":\"iy-jbwju hiwh\",\"output1\":\"iyJbwju hiwh\"},\"Example 15\":{\"input1\":\"nujo-ji-ezp\",\"output1\":\"nujoJiEzp\"},\"Example 16\":{\"input1\":\"two-words\",\"output1\":\"twoWords\"},\"Example 17\":{\"input1\":\"zwbz-xou\",\"output1\":\"zwbzXou\"},\"Example 18\":{\"input1\":\"a b c d e f g h i j\",\"output1\":\"a b c d e f g h i j\"},\"Example 19\":{\"input1\":\"hg nax-lxh\",\"output1\":\"hg naxLxh\"},\"Example 20\":{\"input1\":\"zakwm rxna\",\"output1\":\"zakwm rxna\"},\"Example 21\":{\"input1\":\"w-mvckd qg\",\"output1\":\"wMvckd qg\"},\"Example 22\":{\"input1\":\"ssvc\",\"output1\":\"ssvc\"},\"Example 23\":{\"input1\":\"all-one-word-dashed\",\"output1\":\"allOneWordDashed\"},\"Example 24\":{\"input1\":\"loooooong wooooords\",\"output1\":\"loooooong wooooords\"},\"Example 25\":{\"input1\":\"ggm-z-vf-hm-rhww-vf\",\"output1\":\"ggmZVfHmRhwwVf\"},\"Example 26\":{\"input1\":\"two words\",\"output1\":\"two words\"},\"Example 27\":{\"input1\":\"vkji-i-y\",\"output1\":\"vkjiIY\"},\"Example 28\":{\"input1\":\"ln-wqda fqff-n-snb\",\"output1\":\"lnWqda fqffNSnb\"},\"Example 29\":{\"input1\":\"d\",\"output1\":\"d\"},\"Example 30\":{\"input1\":\"nbsf-lkm-majhu i p\",\"output1\":\"nbsfLkmMajhu i p\"},\"Example 31\":{\"input1\":\"izsvb fcz\",\"output1\":\"izsvb fcz\"},\"Example 32\":{\"input1\":\"dyvy-r-a\",\"output1\":\"dyvyRA\"},\"Example 33\":{\"input1\":\"ee-qjjo-xnqrp\",\"output1\":\"eeQjjoXnqrp\"},\"Example 34\":{\"input1\":\"a-b-c-d-e-f-g-h-i-j\",\"output1\":\"aBCDEFGHIJ\"},\"Example 35\":{\"input1\":\"b erpa\",\"output1\":\"b erpa\"},\"Example 36\":{\"input1\":\"do\",\"output1\":\"do\"},\"Example 37\":{\"input1\":\"nospaceordash\",\"output1\":\"nospaceordash\"},\"Example 38\":{\"input1\":null,\"output1\":null},\"Example 39\":{\"input1\":\"gfxlv-rboq\",\"output1\":\"gfxlvRboq\"},\"Example 40\":{\"input1\":\"wr-yb\",\"output1\":\"wrYb\"},\"Example 41\":{\"input1\":\"xqie-kw-xxa\",\"output1\":\"xqieKwXxa\"},\"Example 42\":{\"input1\":\"loooooong-wooooords\",\"output1\":\"loooooongWooooords\"},\"Example 43\":{\"input1\":\"k-sztp ek-ct-ewrxl\",\"output1\":\"kSztp ekCtEwrxl\"},\"Example 44\":{\"input1\":\"saaaaaaaaaaaaaaaaame\",\"output1\":\"saaaaaaaaaaaaaaaaame\"},\"Example 45\":{\"input1\":\"aimz-yg\",\"output1\":\"aimzYg\"},\"Example 46\":{\"input1\":\"qvuer o bs\",\"output1\":\"qvuer o bs\"},\"Example 47\":{\"input1\":\"e-nfkl-h\",\"output1\":\"eNfklH\"},\"Example 48\":{\"input1\":\"us\",\"output1\":\"us\"},\"Example 49\":{\"input1\":\"all separate words\",\"output1\":\"all separate words\"}}", "response": "\ndef my_func(input1: str) -> str:\n    if input1 is None:\n        return None\n\n    # Split the input string by spaces to process each \"word\" separately\n    words = input1.split(' ')\n    transformed_words = []\n\n    for word in words:\n        # Split each word by the dash character\n        parts = word.split('-')\n        # Capitalize the first letter of each part except the first one\n        transformed_parts = [parts[0]] + [part.capitalize() for part in parts[1:]]\n        # Join the transformed parts back with dashes removed\n        transformed_word = ''.join(transformed_parts)\n        transformed_words.append(transformed_word)\n\n    # Join all transformed words back with spaces\n    result = ' '.join(transformed_words)\n    return result\n"}
